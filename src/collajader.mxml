<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   creationComplete="windowedapplication1_creationCompleteHandler(event)" xmlns:local="*"
			   width="810" height="800">
	<fx:Script>
		<![CDATA[
			import alternativa.engine3d.containers.ConflictContainer;
			import alternativa.engine3d.core.Camera3D;
			import alternativa.engine3d.core.View;
			import alternativa.engine3d.materials.FillMaterial;
			import alternativa.engine3d.primitives.Box;
			
			import flash.net.navigateToURL;
			
			import mx.effects.effectClasses.ZoomInstance;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var sc:SampleScene;
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				var xData:XML = 
					<COLLADA xmlns="http://www.collada.org/2005/11/COLLADASchema" version="1.4.1">
					  <asset>
						<unit name="meter" meter="1"/>
						<up_axis>Z_UP</up_axis>
					  </asset>
					  <library_effects>
						<effect id="Material-effect">
						  <profile_COMMON>
							<technique sid="common">
							  <lambert>
								<emission>
								  <color>0 0 0 1</color>
								</emission>
								<ambient>
								  <color>0 0 0 1</color>
								</ambient>
								<diffuse>
								  <color>0.64 0.64 0.64 1</color>
								</diffuse>
								<index_of_refraction>
								  <float>1</float>
								</index_of_refraction>
							  </lambert>
							</technique>
						  </profile_COMMON>
						</effect>
					  </library_effects>
					  <library_materials>
						<material id="Material" name="Material">
						  <instance_effect url="#Material-effect"/>
						</material>
					  </library_materials>
					  <library_geometries>
						<geometry id="Cube-mesh">
						  <mesh>
							<source id="Cube-mesh-positions">
							  <float_array id="Cube-mesh-positions-array" count="24">1 1 -1 1 -1 -1 -1 -0.9999998 -1 -0.9999997 1 -1 1 0.9999995 1 0.9999994 -1.000001 1 -1 -0.9999997 1 -1 1 1</float_array>
							  <technique_common>
								<accessor source="#Cube-mesh-positions-array" count="8" stride="3">
								  <param name="X" type="float"/>
								  <param name="Y" type="float"/>
								  <param name="Z" type="float"/>
								</accessor>
							  </technique_common>
							</source>
							<source id="Cube-mesh-normals">
							  <float_array id="Cube-mesh-normals-array" count="18">0 0 -1 0 0 1 1 -2.83122e-7 0 -2.83122e-7 -1 0 -1 2.23517e-7 -1.3411e-7 2.38419e-7 1 2.08616e-7</float_array>
							  <technique_common>
								<accessor source="#Cube-mesh-normals-array" count="6" stride="3">
								  <param name="X" type="float"/>
								  <param name="Y" type="float"/>
								  <param name="Z" type="float"/>
								</accessor>
							  </technique_common>
							</source>
							<vertices id="Cube-mesh-vertices">
							  <input semantic="POSITION" source="#Cube-mesh-positions"/>
							</vertices>
							<polylist material="Material" count="6">
							  <input semantic="VERTEX" source="#Cube-mesh-vertices" offset="0"/>
							  <input semantic="NORMAL" source="#Cube-mesh-normals" offset="1"/>
							  <vcount>4 4 4 4 4 4 </vcount>
							  <p>0 0 1 0 2 0 3 0 4 1 7 1 6 1 5 1 0 2 4 2 5 2 1 2 1 3 5 3 6 3 2 3 2 4 6 4 7 4 3 4 4 5 0 5 3 5 7 5</p>
							</polylist>
						  </mesh>
						</geometry>
					  </library_geometries>
					  <library_animations/>
					  <library_controllers/>
					  <library_visual_scenes>
						<visual_scene id="Scene" name="Scene">
						  <node id="Cube" type="NODE" name="cube1">
							<translate sid="location">0 0 0</translate>
							<rotate sid="rotationZ">0 0 1 0</rotate>
							<rotate sid="rotationY">0 1 0 0</rotate>
							<rotate sid="rotationX">1 0 0 0</rotate>
							<scale sid="scale">1 1 1</scale>
							<instance_geometry url="#Cube-mesh">
							  <bind_material>
								<technique_common>
								  <instance_material symbol="Material" target="#Material"/>
								</technique_common>
							  </bind_material>
							</instance_geometry>
						  </node>
					      <node id="Cube2" type="NODE" name="cube2">
					        <translate sid="location">100 1000 0</translate>
					        <rotate sid="rotationZ">0 0 2 0</rotate>
					        <rotate sid="rotationY">0 2 0 0</rotate>
					        <rotate sid="rotationX">2 0 0 0</rotate>
					        <scale sid="scale">1 1 1</scale>
					        <instance_geometry url="#Cube-mesh">
					          <bind_material>
					            <technique_common>
					              <instance_material symbol="Material" target="#Material"/>
					            </technique_common>
					          </bind_material>
					        </instance_geometry>
					      </node>
						</visual_scene>
					  </library_visual_scenes>
					  <scene>
						<instance_visual_scene url="#Scene"/>
					  </scene>
					</COLLADA>
				
				this.colladaData.text = xData.toString();
				this.sc = new SampleScene();
				this.container.rawChildren.addChild(sc);
			}
			
			
			protected function refreshButton_clickHandler(event:MouseEvent):void
			{
				this.focusToggle.selected = false;
				this.sc.controlObject(this.sc.camera);
				this.sc.loadData(this.colladaData.text);
			}
			

			protected function advertisingLabel_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest("http://georgik.sinusgear.com"));
			}


			protected function scaleSlider_changeHandler(event:Event):void
			{
				this.sc.scaleFactor = this.scaleSlider.value;
				if (this.nodeList.selectedItem)
				{
					this.sc.scaleObject(this.nodeList.selectedItem);
				}
			}


			protected function focusToggle_changeHandler(event:Event = null):void
			{
				if (this.focusToggle.selected)
				{
					if (this.nodeList.selectedItem)
					{
						this.sc.controlObject(this.nodeList.selectedItem);
						
					}
				} else {
					this.sc.controlObject(this.sc.camera);
				}
			}


			protected function nodeList_changeHandler(event:IndexChangeEvent):void
			{
				this.sc.deselectAll();
				this.focusToggle_changeHandler();
				if (this.nodeList.selectedItem)
				{
					this.sc.highlight(this.nodeList.selectedItem);
				}
			}


			protected function orbitCheckBox_changeHandler(event:Event):void
			{
				this.sc.isOrbitEnabled = this.orbitCheckBox.selected;
				if (this.orbitCheckBox.selected)
				{
					this.sc.controlObject(this.sc.focusBox);
				} else {
					this.sc.controlObject(this.sc.camera);
				}
			}


			protected function cameraDepthSlider_changeHandler(event:Event):void
			{
				this.sc.cameraScaleFactor = this.cameraDepthSlider.value;
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<mx:Canvas id="container" width="800" height="400" focusEnabled="true">
		
	</mx:Canvas>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		<s:TextArea id="colladaData" width="100%" height="100%" fontFamily="Courier New"/>
		<s:Group height="100%">
			<s:layout>
				<s:VerticalLayout />
			</s:layout>
			<s:Label text="Nodes" />
			<s:List id="nodeList" dataProvider="{this.sc.nodes}" height="100%"
					labelField="name"
					change="nodeList_changeHandler(event)"/>
			<s:ToggleButton id="focusToggle" label="Control" 
							change="focusToggle_changeHandler(event)"/>
		</s:Group>
	</s:Group>
	
	<s:Group width="100%">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		<s:Label id="orbitLabel" text="Orbit" />
		<s:CheckBox id="orbitCheckBox" selected="false"
					change="orbitCheckBox_changeHandler(event)" />
		<s:Label id="cameraDepthLabel" text="Camera distance" />
		<s:HSlider id="cameraDepthSlider" minimum="0" maximum="1000"
				   width="300"
				   value="40" change="cameraDepthSlider_changeHandler(event)"/>
	</s:Group>
	
	<s:Group width="100%">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		<s:Button id="refreshButton" label="Refresh" click="refreshButton_clickHandler(event)" />
		<s:Label id="scaleLabel" text="Scale" />
		<s:HSlider id="scaleSlider" minimum="0" maximum="1000" stepSize="10" width="350"
				   change="scaleSlider_changeHandler(event)"
				   value="200"/>
		<s:Spacer width="100%" />
		<s:Label text="Collajader - Georgik.SinusGear.com - v:0.3" 
				 id="advertisingLabel" click="advertisingLabel_clickHandler(event)"
				 buttonMode="true"/>
		
	</s:Group>

</s:Application>
